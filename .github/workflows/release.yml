name: Release

on:
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - '!src/__tests__/**'
      - 'package.json'
      - 'package-lock.json'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build TypeScript
        run: npm run build

      - name: Create bundle
        run: npm run bundle

      - name: Get version from package.json
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check if version tag exists
        id: tag-check
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Get git diff for release notes
        if: steps.tag-check.outputs.exists == 'false'
        id: git-diff
        run: |
          # Get the diff from the latest commit (merge commit)
          git diff HEAD~1 HEAD -- ':(exclude)package-lock.json' ':(exclude)*.test.ts' > /tmp/release-diff.txt
          echo "Generated diff for OpenAI analysis"

      - name: Generate release notes with OpenAI
        if: steps.tag-check.outputs.exists == 'false'
        id: generate-notes
        run: |
          DIFF_CONTENT=$(cat /tmp/release-diff.txt)

          # Create JSON payload for OpenAI API
          PAYLOAD=$(jq -n \
            --arg diff "$DIFF_CONTENT" \
            '{
              model: "gpt-4o-mini",
              messages: [
                {
                  role: "system",
                  content: "You are a technical writer generating release notes for an MCP server. Analyze the git diff and create concise, user-focused release notes. Focus on what changed for end users, not implementation details. Use markdown formatting. Be brief - 2-4 bullet points maximum. Do not include installation instructions."
                },
                {
                  role: "user",
                  content: ("Generate release notes for this git diff:\n\n" + $diff)
                }
              ],
              temperature: 0.7,
              max_tokens: 500
            }')

          # Call OpenAI API
          RESPONSE=$(curl -s https://api.openai.com/v1/chat/completions \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$PAYLOAD")

          # Extract the generated notes
          NOTES=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

          # Save to output (escape for GitHub Actions)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        if: steps.tag-check.outputs.exists == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            bundle/index.js
          body: |
            ## What's Changed

            ${{ steps.generate-notes.outputs.notes }}

            ---

            **Installation:** See the [README](https://github.com/${{ github.repository }}#quick-setup) for setup instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release (version already exists)
        if: steps.tag-check.outputs.exists == 'true'
        run: |
          echo "Version v${{ steps.package-version.outputs.version }} already exists. Skipping release."
          echo "To create a new release, update the version in package.json"
